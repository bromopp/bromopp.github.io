---
import { Image, getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  sizes?: string;
  widths?: number[];
  formats?: ('webp' | 'avif' | 'png' | 'jpg')[];
  quality?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  fallbackWidth?: number;
  fallbackHeight?: number;
}

const {
  src,
  alt,
  sizes = '(max-width: 640px) 400px, (max-width: 768px) 600px, (max-width: 1024px) 800px, 1200px',
  widths = [400, 600, 800, 1200],
  formats = ['webp', 'png'],
  quality = 80,
  loading = 'lazy',
  class: className = '',
  fallbackWidth = 600,
  fallbackHeight = 400,
  ...rest
} = Astro.props;

// Generate optimized images for different formats and sizes
const optimizedImages = await Promise.all(
  formats.map(async (format) => {
    const images = await Promise.all(
      widths.map(async (width) => {
        const height = Math.round((width / fallbackWidth) * fallbackHeight);
        return await getImage({
          src,
          width,
          height,
          format,
          quality,
        });
      })
    );
    return { format, images };
  })
);

// Generate srcset strings
const srcsets = optimizedImages.map(({ format, images }) => {
  const srcset = images
    .map((img, index) => `${img.src} ${widths[index]}w`)
    .join(', ');
  return { format, srcset };
});

// Fallback image
const fallbackImage = await getImage({
  src,
  width: fallbackWidth,
  height: fallbackHeight,
  format: 'png',
  quality,
});
---

<picture class={className}>
  {srcsets.map(({ format, srcset }) => (
    <source
      type={`image/${format}`}
      srcset={srcset}
      sizes={sizes}
    />
  ))}
  <img
    src={fallbackImage.src}
    alt={alt}
    width={fallbackWidth}
    height={fallbackHeight}
    loading={loading}
    class="w-full h-full object-cover transition-all duration-300"
    {...rest}
  />
</picture>

<style>
  picture img {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  picture img.loaded {
    opacity: 1;
  }
</style>

<script>
  // Progressive image loading
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('picture img');
    
    images.forEach((img) => {
      if (img.complete) {
        img.classList.add('loaded');
      } else {
        img.addEventListener('load', () => {
          img.classList.add('loaded');
        });
      }
    });
  });
</script>
